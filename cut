#!/usr/bin/env python

import re
import sys
import argparse

HELP = '''Print selected parts of lines from each FILE to standard output.
With no FILE, or when FILE is -, read standard input.'''

class lib(object):
    open = open
    stdin = sys.stdin

parser = argparse.ArgumentParser(description=HELP)
parser.add_argument('-d', '--delimiter', dest='delim', default='\t',
                    help='use DELIM instead of TAB for field delimiter')
parser.add_argument('-f', '--fields', dest='fields',
                    help='select only these fields; also print any line that contains no delimiter character, unless the -s option is specified')
parser.add_argument('-b', '--bytes', dest='bytes',
                    help='select only these bytes')
parser.add_argument('-c', '--characters', dest='characters',
                    help='select only these characters')
parser.add_argument('-n', dest='_', action='store_true',
                    help='(ignored)')
parser.add_argument('--complement', dest='complement', action='store_true', default=False,
                    help='complement the set of selected bytes, characters or fields')
parser.add_argument('-s', '--only-delimited', dest='s', action='store_true', default=False,
                    help='do not print lines not containing delimiters')
parser.add_argument('--output-delimiter', dest='STRING',
                    help='use  STRING  as  the output delimiter the default is to use the input delimiter')
parser.add_argument('file', nargs='?',
                    help='FILE')


def fields_splitter(line):
    return line.split(args.delim)


def characters_splitter(line):
    return list(line)


def satisfies_selection(index):
    index += 1
    strindex = str(index)
    for field in args.selection.split(','):
        if strindex == field:
            return True
        elif field.startswith('-'):
            if index <= int(field[1:]):
                return True
        elif field.endswith('-'):
            if index >= int(field[:-1]):
                return True
        elif '-' in field:
            a,b = ( int(i) for i in field.split('-') )
            if a <= index <= b:
                return True
    return False


def get_selection_from_line(line):
    ''' iterate over the cut line and yield selected elements '''
    line = args.splitter(line)
    for i, term in enumerate(line):
        if satisfies_selection(i) is not args.complement:
            yield term


args = parser.parse_args()
args.out_delim = args.STRING
if args.fields is not None:
    if args.out_delim is None:
        args.out_delim = args.delim
    args.splitter = fields_splitter
    args.selection = args.fields
elif args.bytes is not None:
    if args.out_delim is None:
        args.out_delim = ''
    args.splitter = characters_splitter
    args.selection = args.bytes
elif args.characters is not None:
    if args.out_delim is None:
        args.out_delim = ''
    args.splitter = characters_splitter
    args.selection = args.characters
else:
    sys.stderr.write("%s: you must specify a list of bytes, characters, or fields. Try '--help' for more information.\n" % sys.argv[0])
    exit(1)


def main_loop(fd):
    for line in fd:
        line = line.rstrip('\n')
        if args.fields is not None and args.delim not in line:
            if args.s:
                continue
            result = line
        else:
            result = args.out_delim.join(list(get_selection_from_line(line)))
        sys.stdout.write(result)
        if result or args.fields is None or not args.s:
            sys.stdout.write('\n')


if args.file is None:
    main_loop(lib.stdin)
else:
    with lib.open(args.file) as f:
        main_loop(f)
